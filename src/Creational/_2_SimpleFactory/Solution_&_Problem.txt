*Problem Scenario:
The Simple Factory Design Pattern addresses the challenge of creating objects without exposing the instantiation
logic in client code. In traditional scenarios, clients may directly create objects using constructors, but this can
lead to tight coupling and difficulties in adapting to changes in the object creation process.

*Solution:
The Simple Factory Design Pattern provides a solution by introducing a separate factory class responsible for creating
objects. The client code delegates the responsibility of object creation to the factory, allowing for a centralized and
controlled instantiation process. This promotes encapsulation, as the details of object creation are hidden from the
client, reducing dependencies and making it easier to change or extend the instantiation logic.

*Conclusion:
Implementing the Simple Factory Design Pattern results in a more flexible and maintainable codebase. By centralizing
object creation in a dedicated factory, changes to the instantiation process can be made without affecting the client
code. This pattern enhances encapsulation, as clients are shielded from the complexities of object creation, promoting
a cleaner separation of concerns. It also facilitates code reuse, as the factory can be reused across different parts
of the application, promoting a modular and scalable design.
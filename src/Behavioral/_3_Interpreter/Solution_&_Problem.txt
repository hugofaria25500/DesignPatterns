*Problem Scenario:
Imagine you are working on a system that processes and evaluates mathematical expressions represented as strings.
The expressions can involve variables, constants, addition, subtraction, multiplication, and division.
Without using the Interpreter pattern, you might end up with a complex and tightly coupled system where parsing
and evaluation logic are mixed, making it challenging to extend or modify the expression grammar.

*Solution using Interpreter Pattern:

Abstract Expression:
Define an abstract expression interface (Expression) that declares an interpret method.
This represents the common interface for all expressions in the grammar.

Terminal Expressions:
Create terminal expression classes (Variable, Constant) that implement the expression interface.
Terminal expressions represent the basic building blocks of the grammar.

Non-Terminal Expressions:
Create non-terminal expression classes (AdditionExpression, SubtractionExpression, MultiplicationExpression,
DivisionExpression) that implement the expression interface.
Non-terminal expressions represent complex expressions composed of subexpressions.

Context:
Create a context class (Context) that holds information about the variables and their values.
The context is used during the interpretation process.

Client Code:
The client code creates expression objects, associates variables with values in the context,
and interprets expressions.

*Conclusion:
The Interpreter pattern is designed to solve problems related to interpreting and evaluating a language or grammar.
It's particularly useful when dealing with expressions, query languages, or any domain where you need to interpret
and execute sentences in a language.
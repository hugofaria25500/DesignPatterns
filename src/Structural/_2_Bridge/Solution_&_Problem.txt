*Problem Scenario:
Imagine you have a system where you want to separate abstraction (e.g., shapes) from implementation (e.g., rendering).
You want to be able to extend and modify both the abstraction and implementation independently without affecting each other.
Without the Bridge pattern, you might end up with a large number of classes representing combinations of different abstractions
and implementations, leading to a complex and tightly coupled system.

*Solution using Bridge Pattern:

Abstraction:
Define an abstraction interface (Abstraction) that declares the high-level operations that depend on the implementation.
This represents the abstraction layer that clients interact with.

Refined Abstraction:
Create refined abstraction classes (e.g., Circle, Square) that extend the abstraction interface.
These classes provide more specific implementations of the high-level operations.

Implementation Interface:
Define an implementation interface (Implementation) that declares the low-level operations that the abstraction depends on.
This represents the implementation layer that can vary independently.

Concrete Implementations:
Create concrete implementation classes (e.g., OpenGLRenderer, DirectXRenderer) that implement the low-level operations.
These classes provide specific implementations for rendering.

Bridge:
Create a bridge class (Bridge) that connects the abstraction and implementation hierarchies.
This allows the abstraction and implementation to vary independently.

*Conclusion:
This separation of abstraction and implementation allows you to easily add new shapes or
renderers without modifying existing code, promoting flexibility and maintainability.
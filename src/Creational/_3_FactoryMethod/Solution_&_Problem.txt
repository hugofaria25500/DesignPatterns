*Problem Scenario:
The Factory Method Design Pattern addresses the challenge of creating objects in a way that allows for flexibility
and customization without exposing the exact class instantiation in client code. In traditional scenarios, clients
may be tied to specific classes, making it challenging to adapt to changes or extend the object creation process.

*Solution:
The Factory Method Design Pattern provides a solution by introducing an abstract factory method in an interface or
abstract class. Subclasses then implement this factory method to create objects of a particular type. Clients use
the abstract factory method to obtain instances of objects without needing to know the exact class being instantiated.
This promotes flexibility, as subclasses can provide different implementations of the factory method to create
different variations of objects.

*Conclusion:
Implementing the Factory Method Design Pattern results in a more extensible and customizable codebase. Clients rely
on the abstract factory method, allowing for variations in object creation without directly exposing the concrete
classes. This pattern supports the open-closed principle, enabling the addition of new subclasses or changes to
existing ones without modifying client code. It promotes a modular design, facilitating the creation of families of
related objects through the use of factory methods in a consistent and maintainable manner.